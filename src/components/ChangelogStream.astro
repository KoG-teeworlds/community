---
interface Props {
  changes: Record<string, any[]>;
}

const { changes } = Astro.props;

const formatDate = (dateStr: string) => {
  return new Date(dateStr).toLocaleDateString('en-US', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};

const getImpactIcon = (impact: string) => {
  const icons = {
    critical: 'üö®',
    major: '‚≠ê',
    minor: 'üîß',
    patch: 'ü©π'
  };
  return icons[impact as keyof typeof icons] || 'üìù';
};

const getCategoryColor = (category: string) => {
  const colors = {
    feature: '#10b981',
    bugfix: '#f59e0b',
    performance: '#3b82f6',
    security: '#ef4444',
    maintenance: '#8b5cf6',
    api: '#eab308'
  };
  return colors[category as keyof typeof colors] || '#6b7280';
};

const getEnvironmentBadge = (env: string) => {
  const badges = {
    production: { label: 'LIVE', color: '#10b981', bgColor: 'rgba(16, 185, 129, 0.1)' },
    beta: { label: 'TESTING', color: '#f59e0b', bgColor: 'rgba(245, 158, 11, 0.1)' },
    dev: { label: 'DEV', color: '#8b5cf6', bgColor: 'rgba(139, 92, 246, 0.1)' }
  };
  return badges[env as keyof typeof badges] || { label: 'UNKNOWN', color: '#6b7280', bgColor: 'rgba(107, 114, 128, 0.1)' };
};
---

<div class="changelog-stream">
  {Object.entries(changes).map(([date, dayChanges]) => (
    <div class="changelog-day" data-date={date}>
      <div class="day-header">
        <div class="date-info">
          <h2>{formatDate(date)}</h2>
          <div class="day-stats">
            <span class="stats-icon">üìä</span>
            {dayChanges.length} update{dayChanges.length !== 1 ? 's' : ''}
          </div>
        </div>
        <div class="timeline-connector"></div>
      </div>

      <div class="changelog-items">
        {dayChanges.map(async (change) => {
          const { Content } = await change.render();
          const envBadge = getEnvironmentBadge(change.data.environment);
          return (
            <article
              class="changelog-item"
              data-environment={change.data.environment}
              data-category={change.data.category}
              data-impact={change.data.impact}
            >
              <div class="item-glow"></div>
              <div class="item-header">
                <div class="item-meta">
                  <div class="impact-badge" data-impact={change.data.impact}>
                    <span class="impact-icon">{getImpactIcon(change.data.impact)}</span>
                  </div>
                  <div class="version-info">
                    <h3>{change.data.version}</h3>
                    <time class="timestamp">
                      {change.data.date.toLocaleTimeString('en-US', {
                        hour: '2-digit',
                        minute: '2-digit'
                      })}
                    </time>
                  </div>
                </div>
                <div class="badges">
                  <span
                    class="env-badge"
                    style={`background: ${envBadge.bgColor}; color: ${envBadge.color}; border: 1px solid ${envBadge.color}33`}
                  >
                    {envBadge.label}
                  </span>
                  <span
                    class="category-badge"
                    style={`color: ${getCategoryColor(change.data.category)}`}
                  >
                    {change.data.category}
                  </span>
                  {change.data.downtime && (
                    <span class="downtime-badge">‚ö†Ô∏è Downtime</span>
                  )}
                  {change.data.featured && (
                    <span class="featured-badge">üìå Important</span>
                  )}
                </div>
              </div>

              <div class="item-content">
                <Content />

                {(change.data.services?.length > 0 || change.data.apis?.length > 0) && (
                  <div class="affected-systems">
                    <div class="systems-header">
                      <span class="systems-icon">‚ö°</span>
                      <span>Affected Systems</span>
                    </div>
                    {change.data.services && change.data.services.length > 0 && (
                      <div class="system-group">
                        <div class="system-label">
                          <span class="system-emoji">üéÆ</span>
                          <strong>Services</strong>
                        </div>
                        <div class="system-tags">
                          {change.data.services.map((service: string) => (
                            <span class="system-tag">{service}</span>
                          ))}
                        </div>
                      </div>
                    )}
                    {change.data.apis && change.data.apis.length > 0 && (
                      <div class="system-group">
                        <div class="system-label">
                          <span class="system-emoji">üîå</span>
                          <strong>APIs</strong>
                        </div>
                        <div class="system-tags">
                          {change.data.apis.map((api: string) => (
                            <span class="system-tag">{api}</span>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                )}

                {change.data.tags && change.data.tags.length > 0 && (
                  <div class="tags">
                    <span class="tags-label">üè∑Ô∏è Tags:</span>
                    {change.data.tags.map((tag: string) => (
                      <span class="tag">#{tag}</span>
                    ))}
                  </div>
                )}
              </div>

              <div class="item-footer">
                <div class="author-info">
                  <div class="author-avatar">{change.data.author.charAt(0).toUpperCase()}</div>
                  <span class="author-text">Updated by <strong>{change.data.author}</strong></span>
                </div>
              </div>
            </article>
          )
        })}
      </div>
    </div>
  ))}
</div>

<style>
  .changelog-stream {
    display: flex;
    flex-direction: column;
    gap: 2rem;
    animation: fadeIn 0.6s ease-out;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }

  .changelog-day {
    position: relative;
    animation: slideIn 0.6s ease-out;
    animation-fill-mode: both;
  }

  @keyframes slideIn {
    from { opacity: 0; transform: translateX(-20px); }
    to { opacity: 1; transform: translateX(0); }
  }

  .changelog-day[data-date]:nth-child(2) { animation-delay: 0.1s; }
  .changelog-day[data-date]:nth-child(3) { animation-delay: 0.2s; }
  .changelog-day[data-date]:nth-child(4) { animation-delay: 0.3s; }

  .day-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1.5rem;
    position: relative;
  }

  .date-info {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .day-header h2 {
    margin: 0;
    font-size: 1.5rem;
    color: var(--sl-color-white);
    font-weight: 600;
  }

  .day-stats {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    color: var(--sl-color-gray-3);
    background: var(--sl-color-bg-nav);
    padding: 0.5rem 1rem;
    border-radius: 2rem;
    border: 1px solid var(--sl-color-hairline);
    backdrop-filter: blur(10px);
  }

  .stats-icon {
    font-size: 0.875rem;
  }

  .timeline-connector {
    flex: 1;
    height: 2px;
    background: linear-gradient(90deg, var(--sl-color-accent), transparent);
    border-radius: 1px;
  }

  .changelog-items {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    padding-left: 2rem;
    border-left: 2px solid var(--sl-color-hairline);
    position: relative;
  }

  .changelog-items::before {
    content: '';
    position: absolute;
    left: -5px;
    top: 0;
    width: 10px;
    height: 10px;
    background: var(--sl-color-accent);
    border-radius: 50%;
    border: 2px solid var(--sl-color-bg);
  }

  .changelog-item {
    background: var(--sl-color-bg-nav);
    border-radius: 1rem;
    padding: 1.5rem;
    border: 1px solid var(--sl-color-hairline);
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
  }

  .item-glow {
    position: absolute;
    inset: 0;
    background: radial-gradient(circle at 50% 0%, var(--sl-color-accent), transparent 70%);
    opacity: 0;
    transition: opacity 0.4s ease;
    pointer-events: none;
  }

  .changelog-item:hover {
    border-color: var(--sl-color-accent);
    transform: translateY(-4px) scale(1.01);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
  }

  .changelog-item:hover .item-glow {
    opacity: 0.05;
  }

  .item-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 1rem;
    gap: 1rem;
  }

  .item-meta {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .impact-badge {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 3rem;
    height: 3rem;
    border-radius: 1rem;
    background: var(--sl-color-bg);
    border: 1px solid var(--sl-color-hairline);
    flex-shrink: 0;
  }

  .impact-badge[data-impact="critical"] {
    background: rgba(239, 68, 68, 0.1);
    border-color: rgba(239, 68, 68, 0.3);
  }

  .impact-badge[data-impact="major"] {
    background: rgba(245, 158, 11, 0.1);
    border-color: rgba(245, 158, 11, 0.3);
  }

  .impact-icon {
    font-size: 1.25rem;
  }

  .version-info h3 {
    margin: 0 0 0.25rem 0;
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--sl-color-white);
  }

  .timestamp {
    font-size: 0.8125rem;
    color: var(--sl-color-gray-3);
    font-family: var(--sl-font-mono);
  }

  .badges {
    display: flex;
    gap: 0.75rem;
    flex-wrap: wrap;
    align-items: center;
  }

  .env-badge {
    font-size: 0.75rem;
    font-weight: 600;
    padding: 0.375rem 0.75rem;
    border-radius: 0.5rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    backdrop-filter: blur(10px);
  }

  .category-badge {
    font-size: 0.875rem;
    font-weight: 500;
    text-transform: capitalize;
    padding: 0.25rem 0.75rem;
    background: var(--sl-color-bg);
    border-radius: 0.5rem;
    border: 1px solid var(--sl-color-hairline);
  }

  .downtime-badge,
  .featured-badge {
    font-size: 0.75rem;
    font-weight: 600;
    padding: 0.375rem 0.75rem;
    border-radius: 0.5rem;
    backdrop-filter: blur(10px);
  }

  .downtime-badge {
    background: rgba(239, 68, 68, 0.1);
    color: #ef4444;
    border: 1px solid rgba(239, 68, 68, 0.3);
  }

  .featured-badge {
    background: rgba(245, 158, 11, 0.1);
    color: #f59e0b;
    border: 1px solid rgba(245, 158, 11, 0.3);
  }

  .item-content {
    margin-bottom: 1rem;
    line-height: 1.7;
  }

  .affected-systems {
    background: var(--sl-color-bg);
    padding: 1rem;
    border-radius: 0.75rem;
    margin: 1rem 0;
    border: 1px solid var(--sl-color-hairline);
    backdrop-filter: blur(10px);
  }

  .systems-header {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 0.75rem;
    font-weight: 600;
    color: var(--sl-color-white);
    font-size: 0.875rem;
  }

  .systems-icon {
    font-size: 1rem;
  }

  .system-group {
    margin-bottom: 0.75rem;
  }

  .system-group:last-child {
    margin-bottom: 0;
  }

  .system-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 0.5rem;
    font-size: 0.875rem;
    color: var(--sl-color-gray-2);
  }

  .system-emoji {
    font-size: 1rem;
  }

  .system-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .system-tag {
    background: var(--sl-color-accent-low);
    color: var(--sl-color-accent-high);
    padding: 0.25rem 0.75rem;
    border-radius: 0.5rem;
    font-size: 0.8125rem;
    font-weight: 500;
    border: 1px solid var(--sl-color-hairline);
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    align-items: center;
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid var(--sl-color-hairline);
  }

  .tags-label {
    font-size: 0.8125rem;
    color: var(--sl-color-gray-3);
    font-weight: 500;
  }

  .tag {
    background: var(--sl-color-bg);
    color: var(--sl-color-accent);
    padding: 0.25rem 0.75rem;
    border-radius: 0.5rem;
    font-size: 0.8125rem;
    font-weight: 500;
    border: 1px solid var(--sl-color-hairline);
    transition: all 0.2s ease;
  }

  .tag:hover {
    background: var(--sl-color-accent-low);
    transform: translateY(-1px);
  }

  .item-footer {
    padding-top: 1rem;
    border-top: 1px solid var(--sl-color-hairline);
  }

  .author-info {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .author-avatar {
    width: 2rem;
    height: 2rem;
    background: var(--sl-color-accent);
    color: var(--sl-color-white);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
    font-size: 0.875rem;
  }

  .author-text {
    font-size: 0.875rem;
    color: var(--sl-color-gray-3);
  }

  .author-text strong {
    color: var(--sl-color-white);
  }

  @media (max-width: 50rem) {
    .changelog-day {
      margin-left: 0;
    }

    .day-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.75rem;
    }

    .timeline-connector {
      display: none;
    }

    .changelog-items {
      padding-left: 1rem;
    }

    .item-header {
      flex-direction: column;
      gap: 1rem;
    }

    .item-meta {
      flex-wrap: wrap;
    }
  }
</style>
